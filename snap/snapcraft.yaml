# GLOBAL METADATA
## Reference: https://snapcraft.io/docs/snapcraft-yaml-reference
## The name must be unique in the Snap Store.
## Valid snap names consist of lower-case alphanumeric characters and hyphens.
## They cannot be all numbers and they also cannot start or end with a hyphen.
name: owncloud-infinite # you probably want to 'snapcraft register <name>'
## The <base> keyword defines a special kind of snap that provides a run-time environment
## with a minimal set of libraries that are common to most applications.
## They’re transparent to users, but they need to be considered, and specified, when building a snap.
base: core22 # the base snap is the execution environment for this snap
version: "5.0.5+git" # just for humans, typically '1.2+git' or '1.3.2'
summary: ownCloud infinite scale # 79 char long summary
description: |
  To create a truly federated storage architecture oCIS breaks down the old ownCloud 10 user specific namespace, 
  which is assembled on the server side, and makes the individual parts accessible to clients as storage spaces 
  and storage space registries.
website: https://owncloud.dev/ocis/
# icon: <icon path?>
license: MIT

# ARCHITECTURES
## builds a snap to run on the same architecture as the build environment.
## ref: https://snapcraft.io/docs/architectures
# architectures:
#- build-on: arm64
#    build-for:
# - build-on: arm64
# build-for: arm64
# - build-on: amd64

lint:
  ignore:
    - library
# SECURITY MODEL
## Because devmode is only intended for development,
## snaps must be set to strict confinement before they can be published as “stable” in the Snap Store.
## Once an app is working well in devmode, you can review confinement violations,
## add appropriate interfaces, and switch to strict confinement.
confinement: devmode # use 'strict' once you have the right plugs and slots
## Defines the quality grade of the snap.
## Can be either devel (i.e. a development version of the snap,
## so not to be published to the stable or candidate channels) or
## stable (i.e. a stable release or release candidate, which can be released to all channels).
## A snap of type app (default) cannot be set to stable if the base is not on a stable channel.
grade: devel # must be 'stable' to release into candidate/stable channels

#* PARTS
#? Reference: https://snapcraft.io/docs/snapcraft-parts-metadata
##* are the raw building blocks of a snap, used to collect and build binaries and their dependencies.
##* Parts define what sources are needed to assemble your app.
##* Parts can be anything: programs, libraries, or other needed assets.
parts:
  hooks:
    plugin: dump
    source: src/hooks/
    organize:
      bin/: snap/hooks/

  ocis:
    plugin: dump
    # after:
    #   - "yq-install"
    # https://download.owncloud.com/ocis/ocis/stable/5.0.5/ocis-5.0.5-linux-arm64
    source: src/ocis/
    #? In the key/value pair, the key represents the path of a file inside the part and
    #? the value represents how the file is going to be staged.
    #> renames built files in CRAFT_PART_INSTALL
    organize:
      bin/: usr/bin/
    stage:
      - etc/*
      - var/*
      - usr/bin/*
      - -usr/bin/.gitkeep
    prime:
      - usr/bin/*
      - etc/*
      - var/*
    stage-snaps:
      - yq

    build-environment:
      - OCIS_CONFIG_DIR: etc/ocis
      - OCIS_BASE_DATA_PATH: var/lib/ocis

    #? Overrides
    #? Reference: https://snapcraft.io/docs/overrides
    override-build: |
      echo "Starting OVERRIDE-STAGE in $CRAFT_STAGE"
      # ls -al $CRAFT_PART_BUILD
      [ -d "$CRAFT_PART_BUILD/$OCIS_CONFIG_DIR" ] && echo "$CRAFT_PART_BUILD/$OCIS_CONFIG_DIR exists." || mkdir -p "$CRAFT_PART_BUILD/$OCIS_CONFIG_DIR"
      [ -d "$CRAFT_PART_BUILD/$OCIS_BASE_DATA_PATH" ] && echo "$CRAFT_PART_BUILD/$OCIS_BASE_DATA_PATH exists." || mkdir -p "$CRAFT_PART_BUILD/$OCIS_BASE_DATA_PATH"
      [ -f "$CRAFT_PART_BUILD/bin/ocis" ] && chmod +x "$CRAFT_PART_BUILD/bin/ocis" || echo "$CRAFT_PART_BUILD/bin/ocis does not exist."
      craftctl default
      ls -al $CRAFT_PART_BUILD
      ls -al $CRAFT_PART_INSTALL
      ls -al $CRAFT_PART_INSTALL/bin

    #   mkdir -p $CRAFT_PART_INSTALL/$OCIS_CONFIG_DIR
    #   mkdir -p $CRAFT_PART_INSTALL/$OCIS_BASE_DATA_PATH
    #   # ls -al $CRAFT_PART_BUILD_WORK

    #   # ls -al $CRAFT_PART_INSTALL/bin

    override-stage: |
      echo "Starting OVERRIDE-STAGE in $CRAFT_STAGE"
      ls -al $CRAFT_STAGE
      [ -f "$CRAFT_STAGE/usr/bin/ocis" ] && echo "$CRAFT_STAGE/usr/bin/ocis exists." || craftctl default; ls -al $CRAFT_STAGE
      [ -d "$CRAFT_STAGE/$OCIS_CONFIG_DIR" ] && echo "$CRAFT_STAGE/$OCIS_CONFIG_DIR exists." || mkdir -p "$CRAFT_STAGE/$OCIS_CONFIG_DIR"
      [ -d "$CRAFT_STAGE/$OCIS_BASE_DATA_PATH" ] && echo "$CRAFT_STAGE/$OCIS_BASE_DATA_PATH exists." || mkdir -p "$CRAFT_STAGE/$OCIS_BASE_DATA_PATH"

    override-prime: |
      echo "Starting OVERRIDE-PRIME in $CRAFT_PRIME"
      craftctl default
      # [ -f "$CRAFT_PRIME/bin/ocis" ] && echo "$CRAFT_PRIME/bin/ocis exists." || cp -r "$CRAFT_PRIME/usr/bin" "$CRAFT_PRIME"; ls -al "$CRAFT_PRIME"
      ls -al $CRAFT_PRIME

#? Reference: https://github.com/OpenPrinting/cups-snap/blob/master/snapcraft.yaml
# System user for filters and backends to drop privileges, "lp" is not
# available in a Snap
#? See: https://forum.snapcraft.io/t/system-usernames/
# system-usernames:
#   #? From version 2.41 onwards, snapd supports the creation of a snap_daemon user and group within a snap, exposed as user ID (UID) and group ID (GID) 584788 on the host system.
#   snap_daemon: ocis
#   #? From snapd 2.61 onwards, snap_daemon is being deprecated and replaced with _daemon_ (with underscores), which now possesses a UID of 584792.
#   # _daemon_: ocis

# Layouts are transparently supported by Snapcraft when using a base snap (e.g. base: core22).
#? Reference: https://snapcraft.io/docs/snap-layouts
# As a simple example, consider an application you want to snap that:
#   - stores all data in /var/lib/foo
#   - has a configuration file in /etc/foo.conf
#   - uses read-only data in /usr/share/foo
# A layout that allows such software to be used without snap-specific modifications can be defined as follows:
#! None of the above filesystem modifications are visible to any other snaps, or from the wider user session.
#! They’re only visible within the per-snap mount namespace.
#? Layouts are defined as a key-value map, mapping from a <target-path> to a layout declaration.
#? Each declaration may be one of the following:
#* symlink: <source-path>: create a symbolic link.
#*    This method is preferred because it is the cheapest;
#*    the other methods significantly increase the startup time of your application.
#* bind: <source-path>: bind-mount a directory.
#* bind-file: <source-path>: bind-mount a file
#* type: tmpfs: mount a private temporary in-memory filesystem
layout:
  /bin/ocis:
    bind-file: $SNAP/usr/bin/ocis

  #* Path to system relevant data.
  #* Because Infinite Scale does not use a database for storing information like users, groups, spaces, internal data, etc.,
  #* it saves all this data to a permanent file location. Depending on the system setup, the base directory contains not
  #* only the metadata but also blobs. See Filesystems and Shared Storage for more details.
  #* The base path has a default location for metadata and service dependent data (see above) which must be on a POSIX storage.
  #* If not otherwise defined when using S3, it is also used to store blobs using that path:
  #*   - For container images (inside the container) => `/var/lib/ocis`
  #*   - For binary releases => `$HOME/.ocis/`
  /var/lib/ocis:
    # bind: $SNAP_DATA/var/lib/ocis
    bind: $SNAP_COMMON/var/lib/ocis
  # /usr/share/foo:
  #   bind: $SNAP/usr/share/foo
  #* Path to config files.
  #* The configuration directory has a default location for config files, which must be on a POSIX storage:
  #*  - For container images (inside the container) => `/etc/ocis/`
  #*  - For binary releases => `$HOME/.ocis/config/`
  #?    OCIS_CONFIG_DIR: $SNAP_USER_DATA/etc/ocis
  /etc/ocis:
    bind: $SNAP_DATA/etc/ocis

#? Global environment variables
environment:
  # CUPS_SERVERROOT: /var/snap/cups/common/etc/cups
  # CUPS_DATADIR: /snap/cups/current/share/cups
  # CUPS_SERVERBIN: /snap/cups/current/lib/cups
  #? `$SNAP_USER_COMMON`
  #? Directory for user data that is common across revisions of a snap.
  #? Unlike `$SNAP_USER_DATA`, data present in this directory is not backed up or restored across snap refresh
  #? and snap revert operations. The directory is suitable for large data that the application can access even
  #? if it was made or modified by a future version of a snap.
  #? `$SNAP_DATA`
  #? Directory for system data of a snap. This directory is owned and writable by root and is meant to be used by background applications
  #? (daemons, services). Unlike `$SNAP_COMMON` this directory is backed up and restored across snap refresh and snap revert operations.
  #? $SNAP_USER_COMMON ==> $HOME/snap/$SNAP_NAME/common
  #? $SNAP_COMMON ==> /var/snap/$SNAP_NAME/common
  #? $SNAP_DATA ==> /var/snap/$SNAP_NAME/$SNAP_REVISION
  #? $SNAP_USER_DATA ==> $HOME/snap/$SNAP_NAME/$SNAP_REVISION
  #? https://doc.owncloud.com/ocis/next/deployment/general/general-info.html#default-paths
  #* Path to config files.
  #* The configuration directory has a default location for config files, which must be on a POSIX storage:
  #*  - For container images (inside the container) => `/etc/ocis/`
  #*  - For binary releases => `$HOME/.ocis/config/`
  OCIS_CONFIG_DIR: $SNAP_DATA/etc/ocis

  #* Path to system relevant data.
  #* Because Infinite Scale does not use a database for storing information like users, groups, spaces, internal data, etc.,
  #* it saves all this data to a permanent file location. Depending on the system setup, the base directory contains not
  #* only the metadata but also blobs. See Filesystems and Shared Storage for more details.
  #* The base path has a default location for metadata and service dependent data (see above) which must be on a POSIX storage.
  #* If not otherwise defined when using S3, it is also used to store blobs using that path:
  #*   - For container images (inside the container) => `/var/lib/ocis`
  #*   - For binary releases => `$HOME/.ocis/`
  OCIS_BASE_DATA_PATH: $SNAP_COMMON/var/lib/ocis

  #* Path to blobs and metadata if POSIX is used.
  #* Derives from `OCIS_BASE_DATA_PATH` if not set otherwise.
  #* Used if `STORAGE_USERS_DRIVER` is set to ocis
  # STORAGE_USERS_OCIS_ROOT: "/media"

  #* Path to metadata if S3 is used.
  #* Derives from OCIS_BASE_DATA_PATH if not set otherwise.
  #* Used if STORAGE_USERS_DRIVER is set to s3ng.
  #* See Using S3 for Blobs for the S3 configuration.
  #*   When using S3 for storing user data (blobs), metadata must reside on POSIX. The environment variable responsible for
  #*   storaing metadata in S3 is `STORAGE_USERS_S3NG_ROOT` and derives, if not otherwise defined, from the base directory
  #*   `OCIS_BASE_DATA_PATH`. For more details see the section Base Data Directory above.
  # STORAGE_USERS_S3NG_ROOT: xx
  OCIS_LOG_LEVEL: debug
  #* When accessing the server using the hostname or IP:
  #* You must start Infinite Scale using the environment variable OCIS_URL=<hostname or IP>.
  #* See the following sections for more details and information: https://doc.owncloud.com/ocis/next/deployment/general/general-info.html#using-a-reverse-proxy
  #? OCIS_URL
  #* Use the environment variable OCIS_URL to define how Infinite Scale can be accessed;
  #* mandatory is the use of https as protocol for the URL.
  OCIS_URL: "https://localhost:9200"
  #* This tells Infinite Scale to bind it to all available network interfaces.
  # PROXY_HTTP_ADDR: "0.0.0.0:9200"
  #* This causes Infinite Scale to only bind to the local network interface.
  PROXY_HTTP_ADDR: "127.0.0.0:9200"

# plugs:
#   # This interface is needed for checking whether CUPS in this Snap
#   # should run as a proxy for the system's CUPS or whether this Snap's
#   # CUPS is the standard CUPS for the system.  This interface also
#   # serves for scripts which do a migration of the configuration and
#   # print queues of a classically installed CUPS when it is replaced
#   # by this CUPS Snap
#   etc-cups:
#     interface: system-files
#     read:
#       - /etc/cups
#   # Alias name for our cupsd to plug the host system's cups-control to
#   # access the host system's cupsd in proxy mode while we also have a
#   # slot named cups-control for snapped printer setup tools to be able
#   # to manage our cupsd. The plug also allows the utilities included
#   # with this Snap to do admin tasks on a CUPS daemon which is not
#   # from this Snap.
#   cups-host:
#     interface: cups-control

# slots:
#   # Provide the cups-control and cups slots for other Snaps to connect to
#   cups-control:
#     interface: cups-control
#   cups:
#     interface: cups
#     cups-socket-directory: $SNAP_COMMON/run
#? Content slots - PRODUCERS
#? Reference: https://snapcraft.io/docs/content-interface#heading--read-only
# By default, the AppArmor sandbox allows writes to $SNAP_DATA and reads from $SNAP (see Environment variables for details).
# The content interface takes advantage of this feature to map data from other locations to either $SNAP or $SNAP_DATA.
# A bind mount is then created to link $SNAP in one snap (e.g. from /snap/my-snap/1234/content) to an empty directory in the other snap (e.g., to /snap/my-other-snap/4321/incoming-content).
# Locations need to be selected carefully because a bind mount could potentially permit mounts over important locations, such as $SNAP_DATA, preventing access to a snap’s own writable space.
# The same can be done for particular files, if desired, but it requires a pair of interfaces for each file and is more cumbersome.
slots:
  ocis-config:
    interface: content
    #? content (slot and plug): an arbitrary identifier for content type.
    #? Defaults to either local slot name or local plug name for slot/plug definitions respectively.
    content: ocis-config
    #? source (slot): allows multiple directories to be exposed separately rather than grouped together
    source:
      #? write (slot): read and write paths to be exposed to a consuming snap
      write:
        - $OCIS_CONFIG_DIR
      #? read (slot): read-only paths to be exposed to a consuming snap
      # read:
      #   - $SNAP/etc/ocis

#   ocis-base-data:
#     interface: content
#     content: ocis-base-data
#     source:
#       write:
#         - $SNAP_COMMON/var/lib/ocis
#? Content plugs - CONSUMERS
#? Reference: https://snapcraft.io/docs/content-interface#heading--read-only
plugs:
  ocis-config:
    #? default-provider (plug): name of preferred producer snap (<SNAP>)
    # default-provider: lib01604
    interface: content
    #? content (slot and plug): an arbitrary identifier for content type.
    #? Defaults to either local slot name or local plug name for slot/plug definitions respectively.
    content: ocis-config
    #? target (plug): path in consuming snap to find producer snap’s files
    target:
      - $OCIS_CONFIG_DIR
#   ocis-base-data:
#     interface: content
#     content: ocis-base-data
#     target:
#       - $SNAP_COMMON/var/lib/ocis
# #? HOOKS
# hooks:
#   configure:

#? APPS
## ref: https://snapcraft.io/docs/snapcraft-app-and-service-metadata
apps:
  ocis:
    #? Snapcraft normally creates a wrapper holding common environment variables.
    #? Disabling this could be useful for minimal base snaps without a shell,
    #? and for statically linked binaries with no use for an environment.
    #* none - (Disables the creation of an env variable wrapper.)
    #* defaults to: full
    # adapter: full
    # WORKAROUND: Snapcraft impose too much restrictions to the command format
    # https://bugs.launchpad.net/snapcraft/+bug/1820055
    command: /bin/ocis
    plugs:
      - network
      - network-bind
      - network-control
      - ocis-config
  ocis-init:
    #? Daemons: https://snapcraft.io/docs/services-and-daemons
    #? simple: the command is the main process.
    #? oneshot: the configured command will exit after completion
    #? forking: the configured command calls fork() as part of its start-up. The parent process is then expected to exit when start-up is complete
    #? notify: the command configured will send a signal to systemd to indicate that it’s running.
    daemon: oneshot
    #? Defines whether a freshly installed daemon is started automatically,
    #? or whether startup control is deferred to the snap.
    #? If a snap was installed prior to the daemon component being added,
    #? install-mode will determine whether or not the daemon is started automatically
    #? when the component is delivered via a snap update.
    #* defaults to: enable
    install-mode: enable
    command: bin/ocis init
    #? Runs a command from inside the snap after a service stops.
    # post-stop-command:
    #? Controls how the daemon or app should be treated during a snap refresh.
    #? Can be either of the following:
    #* endure: the daemon will not be restarted during a snap refresh.
    #* restart: (default) the daemon will be restarted during a snap refresh.
    #* ignore-running: the app will not block a snap refresh (can only be set for apps).
    refresh-mode: endure
    #? Condition to restart the daemon under.
    #? Defaults to on-failure. Other values are [on-failure|on-success|on-abnormal|on-abort|always|never].
    #? Refer to systemd.service manual - https://www.freedesktop.org/software/systemd/man/systemd.service.html#Restart=
    restart-condition: on-failure
    environment:
      #* ADMIN_PASSWORD or IDM_ADMIN_PASSWORD ==> --admin-password or -ap
      #? When running ocis init, a random admin password will be printed to the shell for first login.
      #? Though the password can be changed afterwards in the UI, it is possible to define it right from the start when initializing.
      ADMIN_PASSWORD: "changeme"
      IDM_ADMIN_PASSWORD: "changeme"
      #? If using this setting, the environment variable MUST be used when starting `ocis server`.
      #* OCIS_FORCE_CONFIG_OVERWRITE ==> --force-overwrite or -f
      #? If you already have run `ocis init` and a config has been defined, a consecutive run will cause a warning
      #? that a config already exists. Use this if you want to create a new configuration.
      OCIS_FORCE_CONFIG_OVERWRITE: "false" #* true|false
      #? Used port ranges: https://doc.owncloud.com/ocis/next/deployment/services/ports-used.html#used-port-ranges
      #* OCIS_INSECURE, --insecure, value=true|false
      #? This allows to use transport security, but disables certificate verification.
      #? Useful with self-signed certificates to avoid certificate warnings.
      #? If set, the value will also be written to the config file. In such a case, when calling `ocis server`,
      #? it is not necessary to set the environment variable again with each start.
      OCIS_INSECURE: "true" #* Embedded Self-Signed Certificates
      # *    If no reverse proxy is set up, the PROXY_TLS environment variable must be set to true because the embedded libreConnect
      # *      shipped with the IDP service has a hard check if the connection is on TLS and uses the HTTPS protocol.
      # *      If this mismatches, an error will be logged and no connection from the client can be established.
      # *    PROXY_TLS can be set to false if a reverse proxy is used and the https connection is terminated at the reverse proxy.
      # *      When setting to false, the communication between the reverse proxy and Infinite Scale is not secured.
      # *      If set to true, you must provide certificates.
      PROXY_TLS: "true"
      # OCIS_INSECURE: "false" #* Certificates Signed by a Trusted CA
      # PROXY_TRANSPORT_TLS_KEY: ./certs/your-host.key
      # PROXY_TRANSPORT_TLS_CERT: ./certs/your-host.crt
    slots:
      - ocis-config

  ocis-server:
    #? Daemons: https://snapcraft.io/docs/services-and-daemons
    #? simple: the command is the main process.
    #? oneshot: the configured command will exit after completion
    #? forking: the configured command calls fork() as part of its start-up. The parent process is then expected to exit when start-up is complete
    #? notify: the command configured will send a signal to systemd to indicate that it’s running.
    daemon: simple
    #? Defines whether a freshly installed daemon is started automatically,
    #? or whether startup control is deferred to the snap.
    #? If a snap was installed prior to the daemon component being added,
    #? install-mode will determine whether or not the daemon is started automatically
    #? when the component is delivered via a snap update.
    #* defaults to: enable
    install-mode: enable
    #? Runs a command from inside the snap after a service stops.
    # post-stop-command:
    #? Controls how the daemon or app should be treated during a snap refresh.
    #? Can be either of the following:
    #* endure: the daemon will not be restarted during a snap refresh.
    #* restart: (default) the daemon will be restarted during a snap refresh.
    #* ignore-running: the app will not block a snap refresh (can only be set for apps).
    refresh-mode: restart
    #? Condition to restart the daemon under.
    #? Defaults to on-failure. Other values are [on-failure|on-success|on-abnormal|on-abort|always|never].
    #? Refer to systemd.service manual - https://www.freedesktop.org/software/systemd/man/systemd.service.html#Restart=
    restart-condition: on-failure
    #? Note that this will bind ocis to the shell you are running.
    #? If you want to detach it and avoid it being stopped when closing the shell or
    #? the shell gets disconnected (SIGHUP), use the following command:
    #* ocis server & disown -h
    command: bin/ocis server
    after:
      - "ocis-init"
    environment:
      # *    If no reverse proxy is set up, the PROXY_TLS environment variable must be set to true because the embedded libreConnect
      # *      shipped with the IDP service has a hard check if the connection is on TLS and uses the HTTPS protocol.
      # *      If this mismatches, an error will be logged and no connection from the client can be established.
      # *    PROXY_TLS can be set to false if a reverse proxy is used and the https connection is terminated at the reverse proxy.
      # *      When setting to false, the communication between the reverse proxy and Infinite Scale is not secured.
      # *      If set to true, you must provide certificates.
      PROXY_TLS: "true"
      #? Used port ranges: https://doc.owncloud.com/ocis/next/deployment/services/ports-used.html#used-port-ranges
      #? Embedded Self-Signed Certificates
      OCIS_INSECURE: "true"
    #? Certificates Signed by a Trusted CA
    #     OCIS_INSECURE: "false"
    #     PROXY_TRANSPORT_TLS_KEY: ./certs/your-host.key
    #     PROXY_TRANSPORT_TLS_CERT: ./certs/your-host.crt
    #* run with demo users
    # IDM_CREATE_DEMO_USERS: true
    # slots:
    #   - ocis-config
    #   - ocis-base-data
    plugs:
      - ocis-config
      #   - ocis-base-data
      ## Network Access
      - network
      - network-bind
      ## Removeable Devices
      ##? removable-media allows read/write access to mounted removable storage in `/media`, `/run/media` and `/mnt`.
      - removable-media
