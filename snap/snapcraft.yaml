# GLOBAL METADATA
## Reference: https://snapcraft.io/docs/snapcraft-yaml-reference
## The name must be unique in the Snap Store.
## Valid snap names consist of lower-case alphanumeric characters and hyphens.
## They cannot be all numbers and they also cannot start or end with a hyphen.
name: owncloud_infinite # you probably want to 'snapcraft register <name>'
## The <base> keyword defines a special kind of snap that provides a run-time environment
## with a minimal set of libraries that are common to most applications.
## They’re transparent to users, but they need to be considered, and specified, when building a snap.
base: core22 # the base snap is the execution environment for this snap
version: '5.0.5+git' # just for humans, typically '1.2+git' or '1.3.2'
summary: ownCloud infinite scale # 79 char long summary
description: |
  To create a truly federated storage architecture oCIS breaks down the old ownCloud 10 user specific namespace, 
  which is assembled on the server side, and makes the individual parts accessible to clients as storage spaces 
  and storage space registries.
website: https://owncloud.dev/ocis/
# icon: <icon path?>
license: MIT

# ARCHITECTURES
## builds a snap to run on the same architecture as the build environment.
## ref: https://snapcraft.io/docs/architectures
architectures:
  #- build-on: arm64
#    build-for:
  - build-on: amd64
    build-for: arm64

# SECURITY MODEL
## Because devmode is only intended for development,
## snaps must be set to strict confinement before they can be published as “stable” in the Snap Store.
## Once an app is working well in devmode, you can review confinement violations,
## add appropriate interfaces, and switch to strict confinement.
confinement: devmode # use 'strict' once you have the right plugs and slots
## Defines the quality grade of the snap.
## Can be either devel (i.e. a development version of the snap,
## so not to be published to the stable or candidate channels) or
## stable (i.e. a stable release or release candidate, which can be released to all channels).
## A snap of type app (default) cannot be set to stable if the base is not on a stable channel.
grade: devel # must be 'stable' to release into candidate/stable channels

# PARTS
## are the raw building blocks of a snap, used to collect and build binaries and their dependencies.
## Parts define what sources are needed to assemble your app.
## Parts can be anything: programs, libraries, or other needed assets.
parts:
  ## The parts arbitrary name
  ocis:
  ## The plugin field=(dump) determines how the information in specified in the source field
  ## and includes the source's contents in the snap.
  ## The source can be a local or remote zip file, deb file, or tarball.
    # plugin: make
    plugin: go
    ## (list of strings) Features used to build optional dependencies
    build-snaps:
      - go
    source-type: git
    source-tag: v5.0.5
    source: https://github.com/owncloud/ocis.git
    ## Before building the part, the packages listed in the build-packages section
    ## need to be installed in the build environment.
    ## These are the tools and libraries that are used during the build process.
    build-packages:
      - make
    #   - libfdk-aac-dev
    # stage-packages:
    #   - pulseaudio
    #   - libfdk-aac-dev
    ## These are packages containing libraries are resources that the final snap needs to run.
    ## They are very similar to those that would be listed as run-time
    ## dependencies on a standard distribution package.
    #stage-packages:
    ## You can override and customise steps of a part’s lifecycle (pull, build, stage, and prime) using overrides;
    ## ref: https://snapcraft.io/docs/overrides
    override-build: |
      ## generate assets
      make generate
      ## build the binary
      make -C ocis build

# APPS
## ref: https://snapcraft.io/docs/snapcraft-app-and-service-metadata
apps:
  ## ref: https://snapcraft.io/docs/services-and-daemons
  # some-daemon:
  #   command: bin/os-release.sh
  #   daemon: simple
  ocis:
    # adapter: full
    # WORKAROUND: Snapcraft impose too much restrictions to the command format
    # https://bugs.launchpad.net/snapcraft/+bug/1820055
    # initialize a minimal oCIS configuration
    #  ./ocis/bin/ocis init
    command: /bin/ocis
    # daemon: simple
    environment:
      #* run with demo users
      # IDM_CREATE_DEMO_USERS: true
      
      #? https://doc.owncloud.com/ocis/next/deployment/general/general-info.html#default-paths
      #* Path to config files.
      #* The configuration directory has a default location for config files, which must be on a POSIX storage:
      #*  - For container images (inside the container) => `/etc/ocis/`
      #*  - For binary releases => `$HOME/.ocis/config/`
      OCIS_CONFIG_DIR: xx
      
      #* Path to system relevant data.
      #* Because Infinite Scale does not use a database for storing information like users, groups, spaces, internal data, etc., 
      #* it saves all this data to a permanent file location. Depending on the system setup, the base directory contains not 
      #* only the metadata but also blobs. See Filesystems and Shared Storage for more details.
      #* The base path has a default location for metadata and service dependent data (see above) which must be on a POSIX storage. 
      #* If not otherwise defined when using S3, it is also used to store blobs using that path:
      #*   - For container images (inside the container) => `/var/lib/ocis`
      #*   - For binary releases => `$HOME/.ocis/`
      #* `SNAP_DATA`
      #* Directory for system data of a snap. This directory is owned and writable by root and is meant to be used by background applications 
      #* (daemons, services). Unlike `SNAP_COMMON` this directory is backed up and restored across snap refresh and snap revert operations.
      OCIS_BASE_DATA_PATH: $SNAP_DATA
      
      #* Path to blobs and metadata if POSIX is used.
      #* Derives from `OCIS_BASE_DATA_PATH` if not set otherwise.
      #* Used if `STORAGE_USERS_DRIVER` is set to ocis
      STORAGE_USERS_OCIS_ROOT: xx
      
      #* Path to metadata if S3 is used.
      #* Derives from OCIS_BASE_DATA_PATH if not set otherwise.
      #* Used if STORAGE_USERS_DRIVER is set to s3ng.
      #* See Using S3 for Blobs for the S3 configuration.
      #*   When using S3 for storing user data (blobs), metadata must reside on POSIX. The environment variable responsible for 
      #*   storaing metadata in S3 is `STORAGE_USERS_S3NG_ROOT` and derives, if not otherwise defined, from the base directory 
      #*   `OCIS_BASE_DATA_PATH`. For more details see the section Base Data Directory above.
      STORAGE_USERS_S3NG_ROOT: xx
      # GOPLAY2_CONFIG_PATH: /$SNAP_USER_DATA/.config
    plugs:
      ## Audio access
      - audio-playback
      - pulseaudio
      ## Network Access
      - ptp
      - network-bind
