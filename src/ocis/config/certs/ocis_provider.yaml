#? traefik provider configuration
#? Reference: https://medium.com/@gembit.soultan/install-and-configure-traefik-proxy-from-binary-file-in-ubuntu-22-04-8ff85237fee3
# # access log
# - "--accessLog=true"
# - "--accessLog.format=json"
# - "--accessLog.fields.headers.names.X-Request-Id=keep"
# - "traefik.enable=${TRAEFIK_DASHBOARD:-false}"
# - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH_USERS:-admin:$$apr1$$4vqie50r$$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
# - "traefik.http.routers.traefik.entrypoints=https"
# - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.owncloud.test}`)"
# - "traefik.http.routers.traefik.middlewares=traefik-auth"
# - "traefik.http.routers.traefik.tls.certresolver=http"
# - "traefik.http.routers.traefik.service=api@internal"
enable: true
certificatesResolvers:
  lece:
    acme:
      email: "${TRAEFIK_ACME_MAIL:-example@example.org}"
      storage: $SNAP/traefik-providers/certs/acme.json
      httpChallenge:
        # used during the challenge
        entryPoint: web
      #? TLS challenge serves the certificates back to the CA in order to renew them
      #     - '--certificatesresolvers.le.acme.tlschallenge=true'
      tlsChallenge: {}
      #? Optionally use the staging server to prevent exhausting rate limits
      # - '--certificatesresolvers.le.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory'
      caServer: "https://acme-staging-v02.api.letsencrypt.org/directory"
      dnsChallenge:
        provider: ${TRAEFIK_DNS_PROVIDER:-false}
http:
  routers:
    # - "traefik.http.routers.ocis.entrypoints=https"
    ocis:
      entryPoints:
        - websecure
      rule: "Host(`${OCIS_DOMAIN:-ocis.owncloud.test}`)"
      service: "ocis"
      tls:
        certResolver: lece
      loadBalancer:
        server:
          port: "${OCIS_DOMAIN//*?:/}"
  # - "traefik.http.routers.ocis.rule=Host(`${OCIS_DOMAIN:-ocis.owncloud.test}`)"
  # - "traefik.http.routers.ocis.tls.certresolver=http"
  # - "traefik.http.routers.ocis.service=ocis"
  # - "traefik.http.services.ocis.loadbalancer.server.port=9200"
# http:
#   routers:
#     # Define a connection between requests and services
#     to-router1:
#       rule: "Host(`project-name.net`)"
#       entryPoints:
#         - "https"
#       middlewares:
#         - "cors"
#       service: service1
#       tls:
#         options: default
# middlewares:
#   cors:
#     headers:
#       accessControlAllowMethods:
#         - "GET"
#         - "OPTIONS"
#         - "PUT"
#         - "POST"
#         - "DELETE"
#         - "PATCH"
#       accessControlAllowHeaders: "*"
#       accessControlAllowOriginList: "*"
#       accessControlMaxAge: 100
#       addVaryHeader: true
# services:
#   # Define how to reach an existing service on our infrastructure
#   service1:
#     loadBalancer:
#       passHostHeader: true
#       servers:
#         - url: "http://10.0.0.170"
# tls:
#   stores:
#     default:
#       defaultCertificate:
#         certFile: /etc/ssl/project-name.net
#         keyFile: /etc/ssl/project-name.net.key
#   options:
#     default:
#       minVersion: VersionTLS12
#       clientAuth:
#         caFiles:
#           - /etc/ssl/ca.crt
#         clientAuthType: "RequireAndVerifyClientCert"
