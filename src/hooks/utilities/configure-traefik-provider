#!/bin/bash -e

TRAEFIK_CHALLENGE_PROVIDER="$(snapctl get traefik.challenge-provider.provider)"

install_traefik_provider() {
    local fpath=${1}
    if [ -f "${fpath}" ]; then
        lookup_challenge_provider "${fpath}"
        check_challenger_provider
        echo "installing traefik provider with environment vars: ${fpath}"
        # yq '(.. | select(tag == "!!str")) |= envsubst' "${fpath}" >"$SNAP/traefik-providers/providers/${fpath##*/}"
        yq '(.. | select(tag == "!!str")) |= envsubst(nu,ne)' "${fpath}" >"$SNAP/traefik-providers/providers/${fpath##*/}"
        # cp "${fpath}" /var/snap/traefik/common/acme.json
    else
        echo >&2 "installation failed: traefik provider file not found: ${fpath}"
        snapctl set-health blocked "traefik provider file not found: ${fpath}"
        exit 1
    fi
}

lookup_challenge_provider() {
    local fpath=${1}
    if ! [ -f "${fpath}" ]; then
        echo >&2 "traefik provider file not found: ${fpath}"
        snapctl set-health blocked "traefik provider file not found: ${fpath}"
        exit 1
    else
        TRAEFIK_CHALLENGE_PROVIDER="$(yq '.certificatesResolvers.*.acme.dnsChallenge.provider | envsubst(nu,ff)' "${fpath}")"
        snapctl set traefik.challenge-provider.provider "${TRAEFIK_CHALLENGE_PROVIDER}"
    fi
}

check_challenger_provider() {
    case "${TRAEFIK_CHALLENGE_PROVIDER}" in
    "cloudflare")
        # Environment Variable Name	Description
        # CLOUDFLARE_HTTP_TIMEOUT	API request timeout
        # CLOUDFLARE_POLLING_INTERVAL	Time between DNS propagation check
        # CLOUDFLARE_PROPAGATION_TIMEOUT	Maximum waiting time for DNS propagation
        # CLOUDFLARE_TTL	The TTL of the TXT record used for the DNS challenge
        CF_API_EMAIL="$(snapctl get traefik.challenge-provider.cloudflare.email)"           #	Account email or CLOUDFLARE_EMAIL
        CF_API_KEY="$(snapctl get traefik.challenge-provider.cloudflare.api-key)"           # or CLOUDFLARE_API_KEY, API key
        CF_DNS_API_TOKEN="$(snapctl get traefik.challenge-provider.cloudflare.dns-token)"   #	or CLOUDFLARE_DNS_API_TOKEN, API token with DNS:Edit permission (since v3.1.0)
        CF_ZONE_API_TOKEN="$(snapctl get traefik.challenge-provider.cloudflare.zone-token)" #	or CLOUDFLARE_ZONE_API_TOKEN, API token with Zone:Read permission (since v3.1.0)
        PROVIDER="$(snapctl get traefik.challenge-provider.cloudflare)"
        if [ -z "$PROVIDER" ]; then
            echo >&2 "please set the following values: \
        traefik.challenge-provider.cloudflare.email, \
        traefik.challenge-provider.cloudflare.api-key, \
        traefik.challenge-provider.cloudflare.dns-token \
        and traefik.challenge-provider.cloudflare.zone-token"
            exit 1
        fi
        ;;
    "false")
        snapctl set-health waiting "traefik.challenge-provider.provider not set"
        ;;
    *)
        echo >&2 "Define the provider you plan to use \
    traefik.challenge-provider.<provider-name>, for more information
    see: (https://doc.traefik.io/traefik/https/acme/#providers)."
        exit 1
        ;;
    esac
}

if ! snapctl is-connected traefik-provider; then
    echo >&2 "The traefik-provider interface is not connected."
    snapctl set-health blocked "snap user: please connect the traefik-provider interface"
    exit 1
fi

exec "$@"
