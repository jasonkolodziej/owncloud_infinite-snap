#!/bin/bash -e
#? Reference: https://snapcraft.io/docs/adding-snap-configuration#heading--interpreting

DEFAULT_OCIS_CONFIG_FILE_LOCATION="$OCIS_CONFIG_DIR/ocis.yaml"

# export NEXTCLOUD_CONFIG_DIR="$SNAP_DATA/nextcloud/config"
# export NEXTCLOUD_DATA_DIR="$SNAP_COMMON/nextcloud/data"

#* PRIVATE_KEY_TERMS
#*   *secret* *password* *key*

#! Not Private Key Terms -
#? Collects the 'non-private' configuration options then sets the configuration via shell
_not_private_key_terms() {
    # yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p != "*secret*") | select(.p != "*key*") | select(.p!= "*password*") | select(.tag != "!!map") | select(.isKey == false) ]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION}
    non_priv=$(yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p != "*secret*") | select(.p != "*key*") | select(.p!= "*password*") | select(.tag != "!!map") | select(.isKey == false) | { .p:.value } ]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})
    non_priv=$(echo -e "${non_priv[@]}" | tr -d '-' | tr ':' '=' | tr -d ' ')
    for line in $non_priv; do
        config_option_modifier $line
    done
    # echo $non_priv
}

#! Private Key Terms -
#? Collects the 'private' configuration options then sets the configuration via shell
_private_key_terms() {
    # yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p != "*secret*") | select(.p != "*key*") | select(.p!= "*password*") | select(.tag != "!!map") | select(.isKey == false) ]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION}
    secrets=$(yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p == "*secret*") | select(.tag != "!!map") | select(.isKey == false) | { .p:.value }]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})
    keys=$(yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p == "*key*") | select(.tag != "!!map") | select(.isKey == false) | { .p:.value } ]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})
    passwords=$(yq '[... | { "p": path | join("."), "isKey": is_key, "tag": tag, "value": eval(path) } | select(.p == "*password*") | select(.tag != "!!map") | select(.isKey == false) | { .p:.value } ]' ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})
    #* clean up ==> | tr -d  '-' | tr ':' '=' | tr -d ' '
    privs=$(echo -e "${secrets[@]} \n ${keys[@]} \n ${passwords[@]}" | tr -d '-' | tr ':' '=' | tr -d ' ')
    for line in $privs; do
        config_option_modifier $line
    done
    # echo "${secrets[@]} \n ${keys[@]} \n ${passwords[@]}"

}

#* Set Config Shell -
#? sets the value/values of the config
#* @param {is_priv} - boolean, default false
#* @param {arr_in} - array, e.g. [ this.conf.param1='something_to_be_set1' this.conf.param2='something_to_be_set2' #... ]
set_config_shell() {
    # local is_priv=${1:='false'}
    # local arr_in=(${1//=/ })
    # local param=${arr_in[0]}
    # local val=${arr_in[1]}

    local modified_arr="${1}"
    #echo $param
    #echo $val
    # if [ "$is_priv" == 'true' ]; then
    #     echo "setting private configuration as==> '${param}=${val}'"
    #     # snapctl set "private.${param}=${val}"
    # else
    #     echo "setting configuration as==> '${param}=${val}'"
    #     # snapctl set "${param}=${val}"
    # fi
    for line in $modified_arr; do
        echo "setting configuration as==> '${line}'"
        snapctl set ${modified}
    done
}

#* Set All Defaults From YAML -
#?  Invokes the splitting of 'private' & 'non-private' configuration options from
#*  the applications YAML file and sets them with-in the context of `snapctl`
set_all_defaults_from_yaml() {
    echo 'Setting all configuration options'
    #? set non private
    _not_private_key_terms
    #? set private
    _private_key_terms
}

#* Get Config -
#?  Requests the current/default config's value if nothing is yet set and returns the value
#* @param {conf_key} - the key to retrieve from the configuration file, default: NIL (a.k.a: grab all configs)
get_config_shell() {
    local conf_key=${1}
    local config_option=
    if [ -n "$conf_key" ]; then #? n, string is not null.
        local config_option="$(snapctl get ${conf_key})"
    fi
    if [ -z "$config_option" ]; then #? z, string is null, that is, has zero length
        config_option="$(yq ".${conf_key}" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})"
    fi
    echo "$config_option"
}

#* Update YAML -
#? Produces output of an updated yaml but doesn't change config
#* @param {in_place} - when 'true' changes the config in-place, default: 'false'
#* @param {updater} - the key to be updated
update_yaml() {
    local in_place="${1:-'false'}"
    local updater="${@:2}"
    if [ "$in_place" == 'false' ]; then
        echo 'generating a non-inplace config'
        # echo "${updater}"
        yq ".$updater" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION}
    else
        echo 'editing config inplace'
        yq -i ".$updater" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION}
    fi

}

_json_to_yaml() {
    # yq -Poy sample.json
    yq -Poy sample.json
}

#* Alternatively, the entire set of configuration options can be dumped as JSON by adding the -d option:
#? [Reference]: https://snapcraft.io/docs/configuration-in-snaps

get_config_json() {
    echo "get_json_config"
    snapctl get -d ${SNAP_NAME}
}

set_config_json() {
    echo "set_json_config"
    yq '.' -o json ${DEFAULT_OCIS_CONFIG_FILE_LOCATION} | snapctl set -d ${SNAP_NAME}
}

#? Config Option Modifier -
#? converts between snapctl config and yaml config
#* @param {array_in} - expected ex> this.is.a.config=2 !NOT! this.is.a.bad.config = 2
config_option_modifier() {
    local arr_in=(${1//=/ })
    local param=${arr_in[0]}
    local val=${arr_in[1]}

    case "$param" in
    #? is 'private' ==> to snapctl var
    *"key"* | *"secret"* | *"password"*)
        # Do stff
        s_param="$(echo $param | tr '_' '-')"
        echo "private.${s_param}=\"${val}\""
        ;;
    #? is 'private' from snapctl var ==> config var
    *"private."*)
        # Do stff
        y_param="$(echo $param | tr '-' '_')"
        echo "${y_param//'private.'/}=\"${val}\""
        ;;
    #? defaults
    *"-"*)
        y_param="$(echo $param | tr '-' '_')"
        echo "${y_param}=\"${val}\""
        ;;
    *"_"*)
        s_param="$(echo $param | tr '_' '-')"
        echo "${s_param}=\"${val}\""
        ;;
    esac
}

handle_config() {
    local this_config="$(get_config_json)"
    # Validate HTTP port
    #        if ! expr "$some_config" : '^[0-9]\+$' > /dev/null; then
    #               echo "\"$some_config\" is not a valid HTTP port" >&2
    #              return 1
    #     fi
    echo "${this_config}"
    # run function from management script
    set_json_config
    # Restart example-server to apply new config
    # snapctl restart example-server
}

get_basics() {
    #? defined generated certs...
    # OCIS_INSECURE=false
    # PROXY_TRANSPORT_TLS_KEY=./certs/your-host.key
    # PROXY_TRANSPORT_TLS_CERT=./certs/your-host.crt
    #? auto certs
    D_OCIS_INSECURE='true'
    # PROXY_HTTP_ADDR=0.0.0.0:9200
    # OCIS_URL=https://your-host:9200
    D_IDM_ADMIN_PASSWORD='changeme'

    local insecure="$(snapctl get insecure)"
    # if [ -z "$insecure" ]; then #? z, string is null, that is, has zero length
    #     insecure="$(yq ".insecure" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})"
    # fi
    if [ -z "$insecure" ]; then #? z, string is null, that is, has zero length
        snapctl set insecure="${D_OCIS_INSECURE}"
    fi

    local idm_adminpass="$(snapctl get private.idm.service-user-passwords.admin-password)"
    # if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
    #     idm_adminpass="$(yq ".idm.service_user_passwords.admin_password" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})"
    # fi
    if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
        snapctl set private.idm.service-user-passwords.admin-password="${D_IDM_ADMIN_PASSWORD}"
    fi
}

check_first_time() {
    local idm_adminpass="$(snapctl get private.idm.service-user-passwords.admin-password)"
    # if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
    #     idm_adminpass="$(yq ".idm.service_user_passwords.admin_password" ${DEFAULT_OCIS_CONFIG_FILE_LOCATION})"
    # fi
    if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
        echo 'false'
    else
        echo 'true'
    fi
}

# #? if the default config hasn't been created

if ![ -f "$DEFAULT_OCIS_CONFIG_FILE_LOCATION" ]; then
    snapctl set-health blocked "usr: $(whoami) conf: ${DEFAULT_OCIS_CONFIG_FILE_LOCATION} was not able to detect file"
fi

if [ "$(check_first_time)" == 'true' ]; then
    terms="$(_private_key_terms)"
    set_config_shell "${terms[@]}"
    #? Note that this will bind ocis to the shell you are running.
    #? If you want to detach it and avoid it being stopped when closing the shell or
    #? the shell gets disconnected (SIGHUP), use the following command:
    #* ocis server & disown -h
    snapctl restart ocis
    snapctl set-health okay
fi

# DEFAULT_OCIS_CONFIG_FILE_LOCATION="../../ocis/config/ocis.example.yaml"

exec "$@"
