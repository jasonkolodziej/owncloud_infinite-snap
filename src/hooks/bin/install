#!/bin/sh -e
#? When running ocis init, a random admin password will be printed to the shell for first login.
#? Though the password can be changed afterwards in the UI, it is possible to define it right from the start when initializing.
#* --insecure
#* OCIS_INSECURE, value=true|false
#? This allows to use transport security, but disables certificate verification.
#? Useful with self-signed certificates to avoid certificate warnings.
#? If set, the value will also be written to the config file. In such a case, when calling `ocis server`,
#? it is not necessary to set the environment variable again with each start.
#* --config-path
#* OCIS_CONFIG_DIR, value=absolute_path
#? If using this setting, the environment variable MUST be used when starting `ocis server`.
#* --force-overwrite or -f
#* OCIS_FORCE_CONFIG_OVERWRITE, value=true|false
#? If you already have run `ocis init` and a config has been defined, a consecutive run will cause a warning
#? that a config already exists. Use this if you want to create a new configuration.

# OCIS_INSECURE=false \
#     IDM_ADMIN_PASSWORD=changeme \
#     ocis init

D_OCIS_CONFIG_FILE_LOCATION="$OCIS_CONFIG_DIR/ocis.yaml"

#? defined generated certs...
# OCIS_INSECURE=false
# PROXY_TRANSPORT_TLS_KEY=./certs/your-host.key
# PROXY_TRANSPORT_TLS_CERT=./certs/your-host.crt
#? auto certs
D_OCIS_INSECURE='true'
# PROXY_HTTP_ADDR=0.0.0.0:9200
# OCIS_URL=https://your-host:9200
D_IDM_ADMIN_PASSWORD='changeme'

# file_created="$(touch ${D_OCIS_CONFIG_FILE_LOCATION})"

get_basics() {
    local insecure="$(snapctl get insecure)"
    # if [ -z "$insecure" ]; then #? z, string is null, that is, has zero length
    #     insecure="$(yq ".insecure" ${CONFIG_FILE_LOCATION})"
    # fi
    if [ -z "$insecure" ]; then #? z, string is null, that is, has zero length
        snapctl set insecure="${D_OCIS_INSECURE}"
    fi

    local idm_adminpass="$(snapctl get private.idm.service-user-passwords.admin-password)"
    # if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
    #     idm_adminpass="$(yq ".idm.service_user_passwords.admin_password" ${CONFIG_FILE_LOCATION})"
    # fi
    if [ -z "$idm_adminpass" ]; then #? z, string is null, that is, has zero length
        snapctl set private.idm.service-user-passwords.admin-password="${D_IDM_ADMIN_PASSWORD}"
    fi
}

#? if the default config hasn't been created
if ! [ -f "$D_OCIS_CONFIG_FILE_LOCATION" ]; then
    get_basics
fi

# snapctl restart ocis
